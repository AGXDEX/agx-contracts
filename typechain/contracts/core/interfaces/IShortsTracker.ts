/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IShortsTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getNextGlobalShortData"
      | "globalShortAveragePrices"
      | "isGlobalShortDataReady"
      | "setInitData"
      | "setIsGlobalShortDataReady"
      | "updateGlobalShortData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getNextGlobalShortData",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShortAveragePrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalShortDataReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInitData",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsGlobalShortDataReady",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalShortData",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNextGlobalShortData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShortAveragePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalShortDataReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsGlobalShortDataReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalShortData",
    data: BytesLike
  ): Result;
}

export interface IShortsTracker extends BaseContract {
  connect(runner?: ContractRunner | null): IShortsTracker;
  waitForDeployment(): Promise<this>;

  interface: IShortsTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNextGlobalShortData: TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncrease: boolean
    ],
    [[bigint, bigint]],
    "view"
  >;

  globalShortAveragePrices: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    "view"
  >;

  isGlobalShortDataReady: TypedContractMethod<[], [boolean], "view">;

  setInitData: TypedContractMethod<
    [_tokens: AddressLike[], _averagePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setIsGlobalShortDataReady: TypedContractMethod<
    [value: boolean],
    [void],
    "nonpayable"
  >;

  updateGlobalShortData: TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _isLong: boolean,
      _sizeDelta: BigNumberish,
      _markPrice: BigNumberish,
      _isIncrease: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNextGlobalShortData"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncrease: boolean
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalShortAveragePrices"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isGlobalShortDataReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setInitData"
  ): TypedContractMethod<
    [_tokens: AddressLike[], _averagePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsGlobalShortDataReady"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGlobalShortData"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _isLong: boolean,
      _sizeDelta: BigNumberish,
      _markPrice: BigNumberish,
      _isIncrease: boolean
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
